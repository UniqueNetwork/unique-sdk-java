/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package network.unique.model


import com.squareup.moshi.Json

/**
 * The collection limits
 *
 * @param accountTokenOwnershipLimit Maximum number of tokens that one address can own
 * @param sponsoredDataSize Maximum byte size of custom token data that can be sponsored when tokens are minted in sponsored mode
 * @param sponsoredDataRateLimit Defines how many blocks need to pass between setVariableMetadata transactions in order for them to be sponsored
 * @param tokenLimit Total amount of tokens that can be minted in this collection
 * @param sponsorTransferTimeout Time interval in blocks that defines once per how long a non-privileged user transfer or mint transaction can be sponsored
 * @param sponsorApproveTimeout Time interval in blocks that defines once per how long a non-privileged user approve transaction can be sponsored
 * @param ownerCanTransfer Boolean value that tells if collection owner or admins can transfer or burn tokens owned by other non-privileged users
 * @param ownerCanDestroy Boolean value that tells if collection owner can destroy it
 * @param transfersEnabled Flag that defines whether token transfers between users are currently enabled
 */


data class EffectiveCollectionLimitsResponseLimits (

    /* Maximum number of tokens that one address can own */
    @Json(name = "accountTokenOwnershipLimit")
    val accountTokenOwnershipLimit: java.math.BigDecimal? = null,

    /* Maximum byte size of custom token data that can be sponsored when tokens are minted in sponsored mode */
    @Json(name = "sponsoredDataSize")
    val sponsoredDataSize: java.math.BigDecimal? = null,

    /* Defines how many blocks need to pass between setVariableMetadata transactions in order for them to be sponsored */
    @Json(name = "sponsoredDataRateLimit")
    val sponsoredDataRateLimit: java.math.BigDecimal? = null,

    /* Total amount of tokens that can be minted in this collection */
    @Json(name = "tokenLimit")
    val tokenLimit: java.math.BigDecimal? = null,

    /* Time interval in blocks that defines once per how long a non-privileged user transfer or mint transaction can be sponsored */
    @Json(name = "sponsorTransferTimeout")
    val sponsorTransferTimeout: java.math.BigDecimal? = null,

    /* Time interval in blocks that defines once per how long a non-privileged user approve transaction can be sponsored */
    @Json(name = "sponsorApproveTimeout")
    val sponsorApproveTimeout: java.math.BigDecimal? = null,

    /* Boolean value that tells if collection owner or admins can transfer or burn tokens owned by other non-privileged users */
    @Json(name = "ownerCanTransfer")
    val ownerCanTransfer: kotlin.Boolean? = null,

    /* Boolean value that tells if collection owner can destroy it */
    @Json(name = "ownerCanDestroy")
    val ownerCanDestroy: kotlin.Boolean? = null,

    /* Flag that defines whether token transfers between users are currently enabled */
    @Json(name = "transfersEnabled")
    val transfersEnabled: kotlin.Boolean? = null

)

